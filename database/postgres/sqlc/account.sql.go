// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: account.sql

package db

import (
	"context"
)

const addAccountBalance = `-- name: AddAccountBalance :one
UPDATE accounts
SET balance = balance + $1
WHERE id = $2
RETURNING id, channel_name, owner, balance, currency, created_at
`

type AddAccountBalanceParams struct {
	Amount int64 `json:"amount"`
	ID     int64 `json:"id"`
}

func (q *Queries) AddAccountBalance(ctx context.Context, arg AddAccountBalanceParams) (Account, error) {
	row := q.db.QueryRow(ctx, addAccountBalance, arg.Amount, arg.ID)
	var i Account
	err := row.Scan(
		&i.ID,
		&i.ChannelName,
		&i.Owner,
		&i.Balance,
		&i.Currency,
		&i.CreatedAt,
	)
	return i, err
}

const createAccount = `-- name: CreateAccount :one
INSERT INTO accounts(channel_name,"owner",balance,currency)
VALUES($1,$2,$3,$4)
RETURNING id, channel_name, owner, balance, currency, created_at
`

type CreateAccountParams struct {
	ChannelName string `json:"channel_name"`
	Owner       string `json:"owner"`
	Balance     int64  `json:"balance"`
	Currency    string `json:"currency"`
}

func (q *Queries) CreateAccount(ctx context.Context, arg CreateAccountParams) (Account, error) {
	row := q.db.QueryRow(ctx, createAccount,
		arg.ChannelName,
		arg.Owner,
		arg.Balance,
		arg.Currency,
	)
	var i Account
	err := row.Scan(
		&i.ID,
		&i.ChannelName,
		&i.Owner,
		&i.Balance,
		&i.Currency,
		&i.CreatedAt,
	)
	return i, err
}

const deleteAccount = `-- name: DeleteAccount :one
DELETE FROM accounts
WHERE id=$1
RETURNING id, channel_name, owner, balance, currency, created_at
`

func (q *Queries) DeleteAccount(ctx context.Context, id int64) (Account, error) {
	row := q.db.QueryRow(ctx, deleteAccount, id)
	var i Account
	err := row.Scan(
		&i.ID,
		&i.ChannelName,
		&i.Owner,
		&i.Balance,
		&i.Currency,
		&i.CreatedAt,
	)
	return i, err
}

const getAccountById = `-- name: GetAccountById :one
SELECT id, channel_name, owner, balance, currency, created_at FROM accounts
WHERE id=$1 LIMIT 1
`

func (q *Queries) GetAccountById(ctx context.Context, id int64) (Account, error) {
	row := q.db.QueryRow(ctx, getAccountById, id)
	var i Account
	err := row.Scan(
		&i.ID,
		&i.ChannelName,
		&i.Owner,
		&i.Balance,
		&i.Currency,
		&i.CreatedAt,
	)
	return i, err
}

const getAccountForUpdate = `-- name: GetAccountForUpdate :one
SELECT id, channel_name, owner, balance, currency, created_at FROM accounts
WHERE id=$1 LIMIT 1
FOR NO KEY UPDATE
`

func (q *Queries) GetAccountForUpdate(ctx context.Context, id int64) (Account, error) {
	row := q.db.QueryRow(ctx, getAccountForUpdate, id)
	var i Account
	err := row.Scan(
		&i.ID,
		&i.ChannelName,
		&i.Owner,
		&i.Balance,
		&i.Currency,
		&i.CreatedAt,
	)
	return i, err
}

const getAccountInfoByIds = `-- name: GetAccountInfoByIds :many
SELECT a.id, a.channel_name, a.balance as cash, 
SUM(
	CASE WHEN i.capital_cost IS NULL THEN 0 ELSE (i.capital_cost * i.current_volume) END
	)
AS total_cogs,
SUM(
	CASE WHEN i.market_price IS NULL THEN 0 ELSE (i.market_price * i.current_volume) END
) AS market_value
FROM accounts as a
LEFT JOIN investments AS i ON a.id = i.account_id
WHERE a.id = ANY($1::bigint[])
GROUP BY a.id,  a.channel_name, a.balance
`

type GetAccountInfoByIdsRow struct {
	ID          int64  `json:"id"`
	ChannelName string `json:"channel_name"`
	Cash        int64  `json:"cash"`
	TotalCogs   int64  `json:"total_cogs"`
	MarketValue int64  `json:"market_value"`
}

func (q *Queries) GetAccountInfoByIds(ctx context.Context, accountIds []int64) ([]GetAccountInfoByIdsRow, error) {
	rows, err := q.db.Query(ctx, getAccountInfoByIds, accountIds)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetAccountInfoByIdsRow
	for rows.Next() {
		var i GetAccountInfoByIdsRow
		if err := rows.Scan(
			&i.ID,
			&i.ChannelName,
			&i.Cash,
			&i.TotalCogs,
			&i.MarketValue,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getAccountPaging = `-- name: GetAccountPaging :many
SELECT a.id, a.channel_name, a.balance, a.currency, 
SUM(
	CASE WHEN e.amount < 0 THEN e.amount ELSE 0 END
) AS withdraw, 
SUM (
	CASE WHEN e.amount > 0 THEN e.amount ELSE 0 END
) as deposit
FROM accounts AS a
LEFT JOIN entries AS e ON a.id = e.account_id
WHERE "owner" = $1
GROUP BY a.id, a.channel_name, a.balance, a.currency
`

type GetAccountPagingRow struct {
	ID          int64  `json:"id"`
	ChannelName string `json:"channel_name"`
	Balance     int64  `json:"balance"`
	Currency    string `json:"currency"`
	Withdraw    int64  `json:"withdraw"`
	Deposit     int64  `json:"deposit"`
}

func (q *Queries) GetAccountPaging(ctx context.Context, owner string) ([]GetAccountPagingRow, error) {
	rows, err := q.db.Query(ctx, getAccountPaging, owner)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetAccountPagingRow
	for rows.Next() {
		var i GetAccountPagingRow
		if err := rows.Scan(
			&i.ID,
			&i.ChannelName,
			&i.Balance,
			&i.Currency,
			&i.Withdraw,
			&i.Deposit,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listAllAccount = `-- name: ListAllAccount :many
select a.id, a.channel_name from accounts as a
where a.owner = $1
`

type ListAllAccountRow struct {
	ID          int64  `json:"id"`
	ChannelName string `json:"channel_name"`
}

func (q *Queries) ListAllAccount(ctx context.Context, owner string) ([]ListAllAccountRow, error) {
	rows, err := q.db.Query(ctx, listAllAccount, owner)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ListAllAccountRow
	for rows.Next() {
		var i ListAllAccountRow
		if err := rows.Scan(&i.ID, &i.ChannelName); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
