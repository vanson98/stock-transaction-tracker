// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0

package db

import (
	"database/sql/driver"
	"fmt"

	"github.com/jackc/pgx/v5/pgtype"
)

type EntryType string

const (
	EntryTypeTM EntryType = "TM"
	EntryTypeIT EntryType = "IT"
)

func (e *EntryType) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = EntryType(s)
	case string:
		*e = EntryType(s)
	default:
		return fmt.Errorf("unsupported scan type for EntryType: %T", src)
	}
	return nil
}

type NullEntryType struct {
	EntryType EntryType `json:"entry_type"`
	Valid     bool      `json:"valid"` // Valid is true if EntryType is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullEntryType) Scan(value interface{}) error {
	if value == nil {
		ns.EntryType, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.EntryType.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullEntryType) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.EntryType), nil
}

type InvestmentStatus string

const (
	InvestmentStatusInactive InvestmentStatus = "inactive"
	InvestmentStatusActive   InvestmentStatus = "active"
	InvestmentStatusBuyout   InvestmentStatus = "buyout"
)

func (e *InvestmentStatus) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = InvestmentStatus(s)
	case string:
		*e = InvestmentStatus(s)
	default:
		return fmt.Errorf("unsupported scan type for InvestmentStatus: %T", src)
	}
	return nil
}

type NullInvestmentStatus struct {
	InvestmentStatus InvestmentStatus `json:"investment_status"`
	Valid            bool             `json:"valid"` // Valid is true if InvestmentStatus is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullInvestmentStatus) Scan(value interface{}) error {
	if value == nil {
		ns.InvestmentStatus, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.InvestmentStatus.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullInvestmentStatus) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.InvestmentStatus), nil
}

type TradeType string

const (
	TradeTypeSELL TradeType = "SELL"
	TradeTypeBUY  TradeType = "BUY"
)

func (e *TradeType) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = TradeType(s)
	case string:
		*e = TradeType(s)
	default:
		return fmt.Errorf("unsupported scan type for TradeType: %T", src)
	}
	return nil
}

type NullTradeType struct {
	TradeType TradeType `json:"trade_type"`
	Valid     bool      `json:"valid"` // Valid is true if TradeType is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullTradeType) Scan(value interface{}) error {
	if value == nil {
		ns.TradeType, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.TradeType.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullTradeType) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.TradeType), nil
}

type TransactionStatus string

const (
	TransactionStatusCOMPLETED   TransactionStatus = "COMPLETED"
	TransactionStatusINCOMPLETED TransactionStatus = "INCOMPLETED"
)

func (e *TransactionStatus) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = TransactionStatus(s)
	case string:
		*e = TransactionStatus(s)
	default:
		return fmt.Errorf("unsupported scan type for TransactionStatus: %T", src)
	}
	return nil
}

type NullTransactionStatus struct {
	TransactionStatus TransactionStatus `json:"transaction_status"`
	Valid             bool              `json:"valid"` // Valid is true if TransactionStatus is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullTransactionStatus) Scan(value interface{}) error {
	if value == nil {
		ns.TransactionStatus, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.TransactionStatus.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullTransactionStatus) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.TransactionStatus), nil
}

type Account struct {
	ID          int64              `json:"id"`
	ChannelName string             `json:"channel_name"`
	Owner       string             `json:"owner"`
	Balance     int64              `json:"balance"`
	Currency    string             `json:"currency"`
	CreatedAt   pgtype.Timestamptz `json:"created_at"`
}

type Entry struct {
	ID        int64 `json:"id"`
	AccountID int64 `json:"account_id"`
	// can be possitive or negative
	Amount    int64              `json:"amount"`
	CreatedAt pgtype.Timestamptz `json:"created_at"`
	Type      EntryType          `json:"type"`
}

type Investment struct {
	ID            int64            `json:"id"`
	AccountID     int64            `json:"account_id"`
	Ticker        string           `json:"ticker"`
	CompanyName   pgtype.Text      `json:"company_name"`
	BuyVolume     int64            `json:"buy_volume"`
	BuyValue      int64            `json:"buy_value"`
	CapitalCost   int64            `json:"capital_cost"`
	MarketPrice   int64            `json:"market_price"`
	SellVolume    int64            `json:"sell_volume"`
	SellValue     int64            `json:"sell_value"`
	CurrentVolume int64            `json:"current_volume"`
	Description   pgtype.Text      `json:"description"`
	Status        InvestmentStatus `json:"status"`
	Fee           int64            `json:"fee"`
	Tax           int64            `json:"tax"`
	UpdatedDate   pgtype.Timestamp `json:"updated_date"`
}

type Transaction struct {
	ID              int64             `json:"id"`
	InvestmentID    int64             `json:"investment_id"`
	Ticker          string            `json:"ticker"`
	TradingDate     pgtype.Timestamp  `json:"trading_date"`
	Trade           TradeType         `json:"trade"`
	Volume          int64             `json:"volume"`
	OrderPrice      int64             `json:"order_price"`
	MatchVolume     int64             `json:"match_volume"`
	MatchPrice      int64             `json:"match_price"`
	MatchValue      int64             `json:"match_value"`
	Fee             int64             `json:"fee"`
	Tax             int64             `json:"tax"`
	Cost            int64             `json:"cost"`
	CostOfGoodsSold int64             `json:"cost_of_goods_sold"`
	Return          int64             `json:"return"`
	Status          TransactionStatus `json:"status"`
}

type User struct {
	Username          string             `json:"username"`
	HashedPassword    string             `json:"hashed_password"`
	FullName          string             `json:"full_name"`
	Email             string             `json:"email"`
	PasswordChangedAt pgtype.Timestamptz `json:"password_changed_at"`
	CreatedAt         pgtype.Timestamptz `json:"created_at"`
}
