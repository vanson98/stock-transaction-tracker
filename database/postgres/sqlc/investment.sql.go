// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: investment.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const countInvestment = `-- name: CountInvestment :one
SELECT COUNT(*) from investments
WHERE account_id=ANY($1::bigint[]) AND (ticker ILIKE $2::text OR company_name ILIKE $2::text)
`

type CountInvestmentParams struct {
	AccountIds []int64 `json:"account_ids"`
	SearchText string  `json:"search_text"`
}

func (q *Queries) CountInvestment(ctx context.Context, arg CountInvestmentParams) (int64, error) {
	row := q.db.QueryRow(ctx, countInvestment, arg.AccountIds, arg.SearchText)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const createInvestment = `-- name: CreateInvestment :one
insert into investments(account_id,ticker,company_name,buy_volume,buy_value,capital_cost,market_price,sell_volume,sell_value,current_volume,description,status,fee,tax)
VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14)
RETURNING id, account_id, ticker, company_name, buy_volume, buy_value, capital_cost, market_price, sell_volume, sell_value, current_volume, description, status, fee, tax, updated_date
`

type CreateInvestmentParams struct {
	AccountID     int64            `json:"account_id"`
	Ticker        string           `json:"ticker"`
	CompanyName   pgtype.Text      `json:"company_name"`
	BuyVolume     int64            `json:"buy_volume"`
	BuyValue      int64            `json:"buy_value"`
	CapitalCost   int64            `json:"capital_cost"`
	MarketPrice   int64            `json:"market_price"`
	SellVolume    int64            `json:"sell_volume"`
	SellValue     int64            `json:"sell_value"`
	CurrentVolume int64            `json:"current_volume"`
	Description   pgtype.Text      `json:"description"`
	Status        InvestmentStatus `json:"status"`
	Fee           int64            `json:"fee"`
	Tax           int64            `json:"tax"`
}

func (q *Queries) CreateInvestment(ctx context.Context, arg CreateInvestmentParams) (Investment, error) {
	row := q.db.QueryRow(ctx, createInvestment,
		arg.AccountID,
		arg.Ticker,
		arg.CompanyName,
		arg.BuyVolume,
		arg.BuyValue,
		arg.CapitalCost,
		arg.MarketPrice,
		arg.SellVolume,
		arg.SellValue,
		arg.CurrentVolume,
		arg.Description,
		arg.Status,
		arg.Fee,
		arg.Tax,
	)
	var i Investment
	err := row.Scan(
		&i.ID,
		&i.AccountID,
		&i.Ticker,
		&i.CompanyName,
		&i.BuyVolume,
		&i.BuyValue,
		&i.CapitalCost,
		&i.MarketPrice,
		&i.SellVolume,
		&i.SellValue,
		&i.CurrentVolume,
		&i.Description,
		&i.Status,
		&i.Fee,
		&i.Tax,
		&i.UpdatedDate,
	)
	return i, err
}

const getInvestmentById = `-- name: GetInvestmentById :one
select id, account_id, ticker, company_name, buy_volume, buy_value, capital_cost, market_price, sell_volume, sell_value, current_volume, description, status, fee, tax, updated_date from investments
where id=$1
`

func (q *Queries) GetInvestmentById(ctx context.Context, id int64) (Investment, error) {
	row := q.db.QueryRow(ctx, getInvestmentById, id)
	var i Investment
	err := row.Scan(
		&i.ID,
		&i.AccountID,
		&i.Ticker,
		&i.CompanyName,
		&i.BuyVolume,
		&i.BuyValue,
		&i.CapitalCost,
		&i.MarketPrice,
		&i.SellVolume,
		&i.SellValue,
		&i.CurrentVolume,
		&i.Description,
		&i.Status,
		&i.Fee,
		&i.Tax,
		&i.UpdatedDate,
	)
	return i, err
}

const getInvestmentByTicker = `-- name: GetInvestmentByTicker :one
SELECT id, account_id, ticker, company_name, buy_volume, buy_value, capital_cost, market_price, sell_volume, sell_value, current_volume, description, status, fee, tax, updated_date from investments
where ticker=$1 AND account_id =$2
`

type GetInvestmentByTickerParams struct {
	Ticker    string `json:"ticker"`
	AccountID int64  `json:"account_id"`
}

func (q *Queries) GetInvestmentByTicker(ctx context.Context, arg GetInvestmentByTickerParams) (Investment, error) {
	row := q.db.QueryRow(ctx, getInvestmentByTicker, arg.Ticker, arg.AccountID)
	var i Investment
	err := row.Scan(
		&i.ID,
		&i.AccountID,
		&i.Ticker,
		&i.CompanyName,
		&i.BuyVolume,
		&i.BuyValue,
		&i.CapitalCost,
		&i.MarketPrice,
		&i.SellVolume,
		&i.SellValue,
		&i.CurrentVolume,
		&i.Description,
		&i.Status,
		&i.Fee,
		&i.Tax,
		&i.UpdatedDate,
	)
	return i, err
}

const getInvestmentsByAccountId = `-- name: GetInvestmentsByAccountId :many
select id, account_id, ticker, company_name, buy_volume, buy_value, capital_cost, market_price, sell_volume, sell_value, current_volume, description, status, fee, tax, updated_date from investments
where account_id=$1
`

func (q *Queries) GetInvestmentsByAccountId(ctx context.Context, accountID int64) ([]Investment, error) {
	rows, err := q.db.Query(ctx, getInvestmentsByAccountId, accountID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Investment
	for rows.Next() {
		var i Investment
		if err := rows.Scan(
			&i.ID,
			&i.AccountID,
			&i.Ticker,
			&i.CompanyName,
			&i.BuyVolume,
			&i.BuyValue,
			&i.CapitalCost,
			&i.MarketPrice,
			&i.SellVolume,
			&i.SellValue,
			&i.CurrentVolume,
			&i.Description,
			&i.Status,
			&i.Fee,
			&i.Tax,
			&i.UpdatedDate,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const searchInvestmentPaging = `-- name: SearchInvestmentPaging :many
SELECT id, account_id, channel_name, ticker, buy_value, buy_volume, capital_cost, current_volume, market_price, sell_value, sell_volume, fee, tax, status, profit FROM investment_overview
WHERE account_id = ANY($1::bigint[]) AND ticker ILIKE $2::text
ORDER BY 
    CASE WHEN $3::text = 'ticker' AND $4::text = 'ascending' THEN ticker END ASC,
    CASE WHEN $3::text = 'ticker' AND $4::text = 'descending' THEN ticker END DESC,
    CASE WHEN $3::text = 'status' AND $4::text = 'ascending' THEN "status" END ASC,
    CASE WHEN $3::text = 'status' AND $4::text = 'descending' THEN "status" END DESC,
    CASE WHEN $3::text = 'channel_name' AND $4::text = 'descending' THEN "channel_name" END DESC,
    CASE WHEN $3::text = 'channel_name' AND $4::text = 'ascending' THEN "channel_name" END ASC,
    CASE WHEN $3::text = 'profit' AND $4::text = 'ascending' THEN profit END ASC,
    CASE WHEN $3::text = 'profit' AND $4::text = 'descending' THEN profit END DESC
OFFSET $5::int LIMIT $6::int
`

type SearchInvestmentPagingParams struct {
	AccountIds []int64 `json:"account_ids"`
	SearchText string  `json:"search_text"`
	OrderBy    string  `json:"order_by"`
	SortType   string  `json:"sort_type"`
	FromOffset int32   `json:"from_offset"`
	TakeLimit  int32   `json:"take_limit"`
}

func (q *Queries) SearchInvestmentPaging(ctx context.Context, arg SearchInvestmentPagingParams) ([]InvestmentOverview, error) {
	rows, err := q.db.Query(ctx, searchInvestmentPaging,
		arg.AccountIds,
		arg.SearchText,
		arg.OrderBy,
		arg.SortType,
		arg.FromOffset,
		arg.TakeLimit,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []InvestmentOverview
	for rows.Next() {
		var i InvestmentOverview
		if err := rows.Scan(
			&i.ID,
			&i.AccountID,
			&i.ChannelName,
			&i.Ticker,
			&i.BuyValue,
			&i.BuyVolume,
			&i.CapitalCost,
			&i.CurrentVolume,
			&i.MarketPrice,
			&i.SellValue,
			&i.SellVolume,
			&i.Fee,
			&i.Tax,
			&i.Status,
			&i.Profit,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateInvestmentStatus = `-- name: UpdateInvestmentStatus :exec
update investments
set status=$2
WHERE id=$1
`

type UpdateInvestmentStatusParams struct {
	ID     int64            `json:"id"`
	Status InvestmentStatus `json:"status"`
}

func (q *Queries) UpdateInvestmentStatus(ctx context.Context, arg UpdateInvestmentStatusParams) error {
	_, err := q.db.Exec(ctx, updateInvestmentStatus, arg.ID, arg.Status)
	return err
}

const updateInvestmentWhenBuying = `-- name: UpdateInvestmentWhenBuying :exec
update investments
set buy_volume = $2,
buy_value = $3,
capital_cost = $4,
current_volume = $5,
fee = $6,
tax = $7,
updated_date = $8, 
status=$9
where id = $1
`

type UpdateInvestmentWhenBuyingParams struct {
	ID            int64            `json:"id"`
	BuyVolume     int64            `json:"buy_volume"`
	BuyValue      int64            `json:"buy_value"`
	CapitalCost   int64            `json:"capital_cost"`
	CurrentVolume int64            `json:"current_volume"`
	Fee           int64            `json:"fee"`
	Tax           int64            `json:"tax"`
	UpdatedDate   pgtype.Timestamp `json:"updated_date"`
	Status        InvestmentStatus `json:"status"`
}

func (q *Queries) UpdateInvestmentWhenBuying(ctx context.Context, arg UpdateInvestmentWhenBuyingParams) error {
	_, err := q.db.Exec(ctx, updateInvestmentWhenBuying,
		arg.ID,
		arg.BuyVolume,
		arg.BuyValue,
		arg.CapitalCost,
		arg.CurrentVolume,
		arg.Fee,
		arg.Tax,
		arg.UpdatedDate,
		arg.Status,
	)
	return err
}

const updateInvestmentWhenSeling = `-- name: UpdateInvestmentWhenSeling :exec
UPDATE investments
SET sell_volume = sell_volume + $2,
sell_value = sell_value + $3,
current_volume = current_volume - $2,
fee = fee + $4,
tax = tax + $5, 
status= $6,
updated_date = $7
WHERE id = $1
`

type UpdateInvestmentWhenSelingParams struct {
	ID                    int64            `json:"id"`
	SellTransactionVolume int64            `json:"sell_transaction_volume"`
	SellTransactionValue  int64            `json:"sell_transaction_value"`
	TransactionFee        int64            `json:"transaction_fee"`
	TransactionTax        int64            `json:"transaction_tax"`
	Status                InvestmentStatus `json:"status"`
	UpdatedDate           pgtype.Timestamp `json:"updated_date"`
}

func (q *Queries) UpdateInvestmentWhenSeling(ctx context.Context, arg UpdateInvestmentWhenSelingParams) error {
	_, err := q.db.Exec(ctx, updateInvestmentWhenSeling,
		arg.ID,
		arg.SellTransactionVolume,
		arg.SellTransactionValue,
		arg.TransactionFee,
		arg.TransactionTax,
		arg.Status,
		arg.UpdatedDate,
	)
	return err
}
