// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: account_entry.sql

package db

import (
	"context"
)

const createAccountEntry = `-- name: CreateAccountEntry :one
INSERT INTO account_entries(account_id,amount,from_type)
VALUES($1,$2,$3)
RETURNING id, account_id, amount, created_at, from_type
`

type CreateAccountEntryParams struct {
	AccountID int64         `json:"account_id"`
	Amount    int64         `json:"amount"`
	FromType  EntryFromType `json:"from_type"`
}

func (q *Queries) CreateAccountEntry(ctx context.Context, arg CreateAccountEntryParams) (AccountEntry, error) {
	row := q.db.QueryRow(ctx, createAccountEntry, arg.AccountID, arg.Amount, arg.FromType)
	var i AccountEntry
	err := row.Scan(
		&i.ID,
		&i.AccountID,
		&i.Amount,
		&i.CreatedAt,
		&i.FromType,
	)
	return i, err
}

const getAccountEntryById = `-- name: GetAccountEntryById :one
SELECT id, account_id, amount, created_at, from_type FROM account_entries
WHERE id=$1
`

func (q *Queries) GetAccountEntryById(ctx context.Context, id int64) (AccountEntry, error) {
	row := q.db.QueryRow(ctx, getAccountEntryById, id)
	var i AccountEntry
	err := row.Scan(
		&i.ID,
		&i.AccountID,
		&i.Amount,
		&i.CreatedAt,
		&i.FromType,
	)
	return i, err
}
